{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michael\\\\Documents\\\\GitHub\\\\goit-react-hw-02-feedback\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport FeedbackOptions from './Feedback/FeedbackOptions';\nimport Statistics from './Statistics/Statistics';\nimport Notification from './Notification/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.onLeaveFeedback = e => {\n      const currentBtnValue = e.currentTarget.value;\n      this.setState(prevState => ({ ...prevState,\n        [currentBtnValue]: prevState[currentBtnValue] + 1\n      }));\n    };\n\n    this.countTotalFeedback = () => {\n      const valuesArr = Object.values(this.state);\n      return valuesArr.reduce((acc, val) => {\n        acc += val;\n        return acc;\n      });\n    };\n\n    this.countZero = () => {\n      if (this.state.good === 0 && this.state.neutral === 0 && this.state.bad === 0) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.countPositiveFeedbackPercentage = () => {\n      return Math.trunc(this.state.good / this.countTotalFeedback() * 100);\n    };\n  }\n\n  render() {\n    const btnNames = Object.keys(this.state);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(FeedbackOptions, {\n          options: btnNames,\n          onLeaveFeedback: this.onLeaveFeedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), this.countZero() ? /*#__PURE__*/_jsxDEV(Notification, {\n          message: \"No feedback given\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Statistics, {\n          stat: this.state,\n          total: this.countTotalFeedback(),\n          positivePercentage: this.countPositiveFeedbackPercentage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Michael/Documents/GitHub/goit-react-hw-02-feedback/src/App.js"],"names":["React","Component","FeedbackOptions","Statistics","Notification","App","state","good","neutral","bad","onLeaveFeedback","e","currentBtnValue","currentTarget","value","setState","prevState","countTotalFeedback","valuesArr","Object","values","reduce","acc","val","countZero","countPositiveFeedbackPercentage","Math","trunc","render","btnNames","keys"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BK,KAD0B,GAClB;AACNC,MAAAA,IAAI,EAAE,CADA;AAENC,MAAAA,OAAO,EAAE,CAFH;AAGNC,MAAAA,GAAG,EAAE;AAHC,KADkB;;AAAA,SAO1BC,eAP0B,GAORC,CAAC,IAAI;AACrB,YAAMC,eAAe,GAAGD,CAAC,CAACE,aAAF,CAAgBC,KAAxC;AACA,WAAKC,QAAL,CAAcC,SAAS,KAAK,EAC1B,GAAGA,SADuB;AAE1B,SAACJ,eAAD,GAAmBI,SAAS,CAACJ,eAAD,CAAT,GAA6B;AAFtB,OAAL,CAAvB;AAID,KAbyB;;AAAA,SAe1BK,kBAf0B,GAeL,MAAM;AACzB,YAAMC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,KAAKd,KAAnB,CAAlB;AACA,aAAOY,SAAS,CAACG,MAAV,CAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpCD,QAAAA,GAAG,IAAIC,GAAP;AACA,eAAOD,GAAP;AACD,OAHM,CAAP;AAID,KArByB;;AAAA,SAsB1BE,SAtB0B,GAsBd,MAAM;AAChB,UACE,KAAKlB,KAAL,CAAWC,IAAX,KAAoB,CAApB,IACA,KAAKD,KAAL,CAAWE,OAAX,KAAuB,CADvB,IAEA,KAAKF,KAAL,CAAWG,GAAX,KAAmB,CAHrB,EAIE;AACA,eAAO,IAAP;AACD,OAND,MAMO;AACL,eAAO,KAAP;AACD;AACF,KAhCyB;;AAAA,SAiC1BgB,+BAjC0B,GAiCQ,MAAM;AACtC,aAAOC,IAAI,CAACC,KAAL,CAAY,KAAKrB,KAAL,CAAWC,IAAX,GAAkB,KAAKU,kBAAL,EAAnB,GAAgD,GAA3D,CAAP;AACD,KAnCyB;AAAA;;AAqC1BW,EAAAA,MAAM,GAAG;AACP,UAAMC,QAAQ,GAAGV,MAAM,CAACW,IAAP,CAAY,KAAKxB,KAAjB,CAAjB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE;AAAA,gCACE,QAAC,eAAD;AACE,UAAA,OAAO,EAAEuB,QADX;AAEE,UAAA,eAAe,EAAE,KAAKnB;AAFxB;AAAA;AAAA;AAAA;AAAA,gBADF,EAKG,KAAKc,SAAL,kBACC,QAAC,YAAD;AAAc,UAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADD,gBAGC,QAAC,UAAD;AACE,UAAA,IAAI,EAAE,KAAKlB,KADb;AAEE,UAAA,KAAK,EAAE,KAAKW,kBAAL,EAFT;AAGE,UAAA,kBAAkB,EAAE,KAAKQ,+BAAL;AAHtB;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AA1DyB;;AA6D5B,eAAepB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport FeedbackOptions from './Feedback/FeedbackOptions';\nimport Statistics from './Statistics/Statistics';\nimport Notification from './Notification/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = e => {\n    const currentBtnValue = e.currentTarget.value;\n    this.setState(prevState => ({\n      ...prevState,\n      [currentBtnValue]: prevState[currentBtnValue] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const valuesArr = Object.values(this.state);\n    return valuesArr.reduce((acc, val) => {\n      acc += val;\n      return acc;\n    });\n  };\n  countZero = () => {\n    if (\n      this.state.good === 0 &&\n      this.state.neutral === 0 &&\n      this.state.bad === 0\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  countPositiveFeedbackPercentage = () => {\n    return Math.trunc((this.state.good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    const btnNames = Object.keys(this.state);\n    return (\n      <div className=\"App\">\n        <section>\n          <FeedbackOptions\n            options={btnNames}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n          {this.countZero() ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              stat={this.state}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}